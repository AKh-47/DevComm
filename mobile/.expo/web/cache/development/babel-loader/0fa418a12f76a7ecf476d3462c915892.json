{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar baseURL = \"http://localhost:8000\";\nexport var GET = function GET(url) {\n  var raw, data;\n  return _regeneratorRuntime.async(function GET$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(baseURL + url));\n\n        case 3:\n          raw = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(raw.json());\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\nexport var POST = function POST(url, payload) {\n  var raw, data;\n  return _regeneratorRuntime.async(function POST$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(baseURL + url, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              authorization: \"Bearer \" + \"lol token\"\n            },\n            body: JSON.stringify(payload)\n          }));\n\n        case 3:\n          raw = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(raw.json());\n\n        case 6:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", data);\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};","map":{"version":3,"sources":["/home/akhilkala/Desktop/App/DevComm/mobile/utils/request.ts"],"names":["baseURL","GET","url","fetch","raw","json","data","POST","payload","method","headers","authorization","body","JSON","stringify"],"mappings":";AAAA,IAAMA,OAAO,GAAG,uBAAhB;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGC,KAAK,CAACH,OAAO,GAAGE,GAAX,CAFR;;AAAA;AAETE,UAAAA,GAFS;AAAA;AAAA,2CAGIA,GAAG,CAACC,IAAJ,EAHJ;;AAAA;AAGTC,UAAAA,IAHS;AAAA,2CAIRA,IAJQ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;AAUP,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAOL,GAAP,EAAoBM,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEEL,KAAK,CAACH,OAAO,GAAGE,GAAX,EAAgB;AACrCO,YAAAA,MAAM,EAAE,MAD6B;AAErCC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEPC,cAAAA,aAAa,cAAY;AAFlB,aAF4B;AAMrCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AAN+B,WAAhB,CAFP;;AAAA;AAEVJ,UAAAA,GAFU;AAAA;AAAA,2CAUGA,GAAG,CAACC,IAAJ,EAVH;;AAAA;AAUVC,UAAAA,IAVU;AAAA,4CAWTA,IAXS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb","sourcesContent":["const baseURL = \"http://localhost:8000\";\n\nexport const GET = async (url: string) => {\n  try {\n    const raw = await fetch(baseURL + url);\n    const data = await raw.json();\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const POST = async (url: string, payload: any) => {\n  try {\n    const raw = await fetch(baseURL + url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${\"lol token\"}`,\n      },\n      body: JSON.stringify(payload),\n    });\n    const data = await raw.json();\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}