{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/akhilkala/Desktop/App/DevComm/mobile/context/RoomsContext.tsx\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport socket from \"../utils/socket\";\nimport { useAuth } from \"./AuthContext\";\nvar RoomsContext = React.createContext(null);\nexport function useRooms() {\n  return useContext(RoomsContext);\n}\nexport default function RoomsProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      room = _useState2[0],\n      setRoom = _useState2[1];\n\n  var auth = useAuth();\n  useEffect(function () {\n    socket.on(\"recive-message\", function (user, message) {});\n  }, []);\n\n  var joinRoom = function joinRoom(roomID) {\n    socket.emit(\"join-room\", \"react\");\n    setRoom(roomID);\n  };\n\n  var leaveRoom = function leaveRoom(roomID) {\n    socket.emit(\"leave-room\", \"react\");\n    setRoom(null);\n  };\n\n  var sendMessage = function sendMessage(message) {\n    if (!room) return;\n    socket.emit(\"leave-room\", room, auth == null ? void 0 : auth.currentUser, message);\n  };\n\n  var value = {\n    joinRoom: joinRoom,\n    leaveRoom: leaveRoom\n  };\n  return React.createElement(RoomsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/home/akhilkala/Desktop/App/DevComm/mobile/context/RoomsContext.tsx"],"names":["React","useContext","useState","useEffect","socket","useAuth","RoomsContext","createContext","useRooms","RoomsProvider","children","room","setRoom","auth","on","user","message","joinRoom","roomID","emit","leaveRoom","sendMessage","currentUser","value"],"mappings":";;AAAA,OAAOA,KAAP,IAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,SAApD,QAAqE,OAArE;AAEA,OAAOC,MAAP;AACA,SAASC,OAAT;AAgBA,IAAMC,YAAY,GAAGN,KAAK,CAACO,aAAN,CAAqC,IAArC,CAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOP,UAAU,CAACK,YAAD,CAAjB;AACD;AAED,eAAe,SAASG,aAAT,OAA0D;AAAA,MAAjCC,QAAiC,QAAjCA,QAAiC;;AAAA,kBAC/CR,QAAQ,CAAiB,IAAjB,CADuC;AAAA;AAAA,MAChES,IADgE;AAAA,MAC1DC,OAD0D;;AAGvE,MAAMC,IAAI,GAAGR,OAAO,EAApB;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,MAAM,CAACU,EAAP,CAAU,gBAAV,EAA4B,UAACC,IAAD,EAAkBC,OAAlB,EAAsC,CAAE,CAApE;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAoB;AACnCd,IAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyB,OAAzB;AACAP,IAAAA,OAAO,CAACM,MAAD,CAAP;AACD,GAHD;;AAKA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAACF,MAAD,EAAoB;AACpCd,IAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ,EAA0B,OAA1B;AACAP,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,MAAMS,WAAW,GAAG,SAAdA,WAAc,CAACL,OAAD,EAAqB;AACvC,QAAI,CAACL,IAAL,EAAW;AACXP,IAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ,EAA0BR,IAA1B,EAAgCE,IAAhC,oBAAgCA,IAAI,CAAES,WAAtC,EAAmDN,OAAnD;AACD,GAHD;;AAKA,MAAMO,KAAK,GAAG;AACZN,IAAAA,QAAQ,EAARA,QADY;AAEZG,IAAAA,SAAS,EAATA;AAFY,GAAd;AAKA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCb,QAAtC,CADF;AAGD","sourcesContent":["import React, { ReactElement, useContext, useState, useEffect } from \"react\";\nimport { Room, Nullable } from \"../utils/types\";\nimport socket from \"../utils/socket\";\nimport { useAuth } from \"./AuthContext\";\n\ninterface Props {\n  children: ReactElement;\n}\n\ninterface Value {\n  joinRoom: (roomID: string) => void;\n  leaveRoom: (roomID: string) => void;\n}\n\ninterface IUserLink {\n  message: string;\n  _id: string;\n}\n\nconst RoomsContext = React.createContext<Nullable<Value>>(null);\n\nexport function useRooms() {\n  return useContext(RoomsContext);\n}\n\nexport default function RoomsProvider({ children }: Props): ReactElement {\n  const [room, setRoom] = useState<Nullable<Room>>(null);\n\n  const auth = useAuth();\n\n  useEffect(() => {\n    socket.on(\"recive-message\", (user: IUserLink, message: string) => {});\n  }, []);\n\n  const joinRoom = (roomID: string) => {\n    socket.emit(\"join-room\", \"react\");\n    setRoom(roomID);\n  };\n\n  const leaveRoom = (roomID: string) => {\n    socket.emit(\"leave-room\", \"react\");\n    setRoom(null);\n  };\n\n  const sendMessage = (message: string) => {\n    if (!room) return;\n    socket.emit(\"leave-room\", room, auth?.currentUser, message);\n  };\n\n  const value = {\n    joinRoom,\n    leaveRoom,\n  };\n\n  return (\n    <RoomsContext.Provider value={value}>{children}</RoomsContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}